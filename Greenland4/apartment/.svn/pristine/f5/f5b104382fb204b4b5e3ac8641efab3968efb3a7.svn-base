<template>
  <div class="operation" id="bb">
    <div v-if='showcom' class="wrap">
      <Row type="flex" justify="space-between" style="padding-bottom:10px;">
        <Col>
        <Button type="ghost" :disabled="power" @click='addSOP' style="margin-right:20px;">新建</Button>
        <Button type="ghost" :disabled="power" @click='removeSOP' style="margin-right:20px;">
          删除
        </Button>
        <Button type="ghost" :disabled="power" @click='copySOP'>
          复制
        </Button>
        </Col>
        <Col>
        <span>开始时间：</span>
        <DatePicker type="date" v-model="startDate"  placeholder="选择时间"></DatePicker>
        <span>结束时间：</span>
        <DatePicker type="date" v-model="endDate"  placeholder="选择时间"></DatePicker>
        <Select v-model="searchType" style="width:100px">
          <Option v-for="item in searchTypeList" :value="item.key" :key="item.key">{{ item.title }}</Option>
        </Select>
        <Input v-if="searchType != 'isEnable'" v-model="searchValue"   placeholder="请输入搜索的内容" style="width: 200px"></Input>
        <Select v-if="searchType == 'isEnable'" v-model="searchIsEnable"  style="width:200px">
          <Option  :value="0" >启用</Option>
          <Option  :value="1" >禁用</Option>
        </Select>
        <Button icon="ivu-icon ivu-icon-search" @click="search"></Button>
        </Col>
      </Row>
      <Table border @on-select="onSelect" @on-row-dblclick="editSOP" ref="selection" :columns="columns1" :data="data1"></Table>
      <div style="float:right;margin:10px;">
        <Page :total="total" :page-size='10' @on-change="onChange"></Page>
      </div>
    </div>
    <div v-else class="wrap">
      <Form ref="formValidate" :model="formValidate" :rules="ruleValidate" label-position="right" :label-width="100">
        <Row>
          <Col :xs="24" :lg="12">
          <FormItem label="站点名称" prop="siteUuid">
            <Select v-model="formValidate.siteUuid" @on-change="onChangeSite">
              <Option v-for="item in siteList" :value="item.uuid" :key="item.uuid">{{ item.siteName }}</Option>
            </Select>
          </FormItem>
          </Col>
          <!-- <Col :xs="24" :lg="12">
          <FormItem label="sop编号" prop="sopNum">
            <Input disabled v-model="formValidate.sopNum"></Input>
          </FormItem>
          </Col> -->
        </Row>
        <Row>
          <Col :xs="24" :lg="12">
          <FormItem label="sop名称" prop="sopName">
            <Input v-model="formValidate.sopName"></Input>
          </FormItem>
          </Col>
          <Col :xs="24" :lg="12">
          <FormItem label="状态">
            <RadioGroup v-model="formValidate.isEnable">
              <Radio :label="0">启用</Radio>
              <Radio :label="1">禁用</Radio>
            </RadioGroup>
          </FormItem>
          </Col>

        </Row>
        <div style="margin-bottom:20px;">
          <Button type="ghost" @click="add">添加新项</Button>
          <Button type="ghost" style="margin-left: 8px">导入列表</Button>
        </div>

        <Table :columns="columns" :data="data" :border="true"></Table>
        <Modal v-model="modal" title="Common Modal dialog box title" @on-ok="saveOption" @on-cancel="cancel">
          <Button type="primary" @click="addOption">添加</Button>
          <span>手机端会取第一条数据作为默认值</span>
          <Row v-for="(item,index) in optionList" :key="index" style="margin:5px 0">
            <Col span="20" class-name="optionStyleBtn">
            <Input v-model="item.value"></Input>
            </Col>
            <Col span="2" style="margin-left:10px;">
            <Button @click="delOption(index)">删除</Button>
            </Col>
          </Row>
        </Modal>
        <FormItem style="margin-top:20px;">
          <Button type="primary" :disabled="power" @click="handleSubmit('formValidate')" class="save " style="margin-left: 0px;">保存</Button>
          <Button type="ghost" @click="handleReset('formValidate')" class="button " style="margin-left: 8px">取消</Button>
        </FormItem>
      </Form>

    </div>
  </div>
</template>

<script>
import {
  sopAdd,
  sopCode,
  sopList,
  sopUpdate,
  sopId,
  siteSpinner
} from "../../api/index.js";
export default {
  data() {
    return {
      searchIsEnable:2,
      startDate: "",
      endDate: "",
      columns: [],
      total: 0,
      data: [],
      modal: false,
      searchValue: "",
      searchType: "sopNum",
      searchTypeList: [
        {
          title: "sop编码",
          key: "sopNum"
        },
        {
          title: "sop名称",
          key: "sopName"
        },
        {
          title: "站点",
          key: "siteName"
        },
        {
          title: "状态",
          key: "isEnable"
        }
      ],
      selection: [],
      siteList: [],
      operationstatus: "add",
      activeindex: -1,
      optionList: [],
      showcom: true,
      formValidate: {
        isEnable: 0,
        sopNum: "",
        sopName: "",
        siteUuid: ""
      },
      ruleValidate: {
        sopNum: [
          {
            required: true,
            message: "sop编号为必填项",
            trigger: "change"
          }
        ],
        sopName: [
          {
            required: true,
            message: "sop名称为必填项",
            trigger: "change"
          }
        ],
        siteUuid: [
          {
            required: true,
            message: "站点为必填项",
            trigger: "change"
          }
        ]
      },
      columns1: [
        {
          type: "selection",
          width: 60,
          align: "center"
        },
        {
          title: "sop编号",
          key: "sopNum"
        },
        {
          title: "sop名称",
          key: "sopName"
        },
        {
          title: "站点",
          key: "siteName"
        },
        {
          title: "创建时间",
          key: "createTime",
          sortable: true
        },
        {
          title: "状态",
          key: "isEnable"
        }
      ],
      data1: [
        {
          sopNum: "BEJTSL2220",
          sopName: "BEJTLS01",
          createTime: "BEJTLS01",
          isEnable: "sop2220111",
          siteName: "上海站"
        }
      ]
    };
  },
  created() {
    this.init();
    siteSpinner().then(res => {
      this.siteList = res.data.data;
    });
    this.getformatdata({ pageSize: 10, startPage: 1 });
  },
  methods: {
    search() {
      let searchData = {
        pageSize: 10,
        startPage: 1,
        startDate: this.startDate,
        endDate: this.endDate
      };
      if (this.searchType == "isEnable") {
        searchData.isEnable = this.searchIsEnable;
      } else {
        searchData[this.searchType] = this.searchValue;
      }
      if (this.endDate != "" && this.startDate != "") {
        if (this.endDate >= this.startDate) {
          this.getformatdata(searchData);
        } else {
          this.$Message.info("结束时间应大于开始时间");
          this.endDate = "";
        }
      } else {
        this.getformatdata(searchData);
      }
    },
    add() {
      this.data.push({
        title: "地面",
        type: "button",
        content: []
      });
    },
    addOption() {
      this.optionList.push({
        value: ""
      });
      console.log(this.optionList);
    },
    delOption(index) {
      this.optionList.splice(index, 1);
    },
    saveOption() {
      this.data[this.activeindex].content = this.optionList;
      this.optionList = [];
      console.log(this.data);
    },
    cancel() {},
    handleSelectAll(status) {
      this.$refs.selection.selectAll(status);
    },
    handleSubmit(name) {
      this.$refs[name].validate(valid => {
        if (valid) {
          this.data.forEach((item, index) => {
            item.seq = index + "";
            //item.content = JSON.stringify(item.content)
          });
          this.formValidate.sopTemplate = JSON.stringify(this.data);
          console.log(this.formValidate);
          if (this.operationstatus == "add") {
            sopAdd(this.formValidate).then(res => {
              this.$Message.success(res.data.data);
    this.getformatdata({ pageSize: 10, startPage: 1 });
              (this.formValidate = {
                isEnable: 0,
                sopNum: "",
                sopName: "",
                siteUuid: ""
              }),
                (this.data = []);
            });
          } else {
            sopUpdate(this.formValidate).then(res => {
    this.getformatdata({ pageSize: 10, startPage: 1 });
              (this.formValidate = {
                isEnable: 0,
                sopNum: "",
                sopName: "",
                siteUuid: ""
              }),
                (this.data = []);
            });
          }
          this.showcom = true;
        } else {
          this.$Message.error("Fail!");
        }
      });
    },
    handleReset(name) {
      this.showcom = true;
      this.$refs[name].resetFields();
    },
    handleAdd() {
      this.sopdata.push({
        description: "",
        type: "",
        typeoption: ""
      });
    },
    handleRemove(index) {
      this.formValidate.items[index].status = 0;
    },
    addSOP: function() {
      this.showcom = false;
      this.operationstatus = "add";
    },
    editSOP(row, index) {
      sopId(row.uuid).then(res => {
        console.log(res);
        let dataDetail = res.data.data;
        this.formValidate = {
          isEnable: dataDetail.isEnable,
          sopNum: dataDetail.sopNum,
          sopName: dataDetail.sopName,
          siteUuid: dataDetail.siteUuid,
          uuid: dataDetail.uuid
        };
        this.data = dataDetail.sopTemplate;
        console.log(this.data);
      });
      this.showcom = false;
      this.operationstatus = "edit";
    },
    removeSOP() {},
    copySOP() {
      //this.selection
    },
    onSelect(selection, row) {
      this.selection = selection;
    },
    onChange(startPage) {
    this.getformatdata({ pageSize: 10, startPage: startPage });
    },
    onChangeSite(siteUuid) {
      if (this.operationstatus == "add") {
        sopCode(siteUuid).then(res => {
          this.formValidate.sopNum = res.data.data;
        });
      }
    },
    
    getformatdata(data) {
      sopList(data).then(res => {
        this.data1 = res.data.data.records;
        this.total = res.data.data.total;
        this.data1.forEach(item => {
          item.createTime = this.$util.formatTime(item.createTime);
          item.isEnable = item.isEnable == 0 ? "启用" : "禁用";
        });
      });
    },
    init() {
      let vm = this;
      this.columns = [
        {
          title: "序号",
          width: 80,
          align: "center",
          type: "index"
        },
        {
          title: "sop步骤名称",
          key: "title",
          render: (h, params) => {
            return h("Input", {
              props: {
                type: "text",
                value: vm.data[params.index].title //此处如何让数据双向绑定
              },
              on: {
                "on-blur": event => {
                  vm.data[params.index].title = event.target.value;
                }
              }
            });
          }
        },
        {
          title: "sop步骤类型",
          key: "type",
          render: (h, params) => {
            return h(
              "Select",
              {
                props: {
                  value: this.data[params.index].type
                },
                on: {
                  "on-change": event => {
                    this.data[params.index].type = event;
                  }
                }
              },
              [
                h(
                  "Option",
                  {
                    props: {
                      value: "button"
                    }
                  },
                  "是否正常"
                ),
                h(
                  "Option",
                  {
                    props: {
                      value: "select"
                    }
                  },
                  "下拉框"
                ),
                h(
                  "Option",
                  {
                    props: {
                      value: "radio"
                    }
                  },
                  "单选框"
                ),
                h(
                  "Option",
                  {
                    props: {
                      value: "text"
                    }
                  },
                  "输入框"
                ),
                h(
                  "Option",
                  {
                    props: {
                      value: "picture"
                    }
                  },
                  "拍照"
                )
              ]
            );
          }
        },
        {
          title: "操作",
          key: "sopDetailAction",
          align: "center",
          render: (h, params) => {
            return h("div", [
              h(
                "Button",
                {
                  props: {
                    type: "primary",
                    size: "default",
                    disabled:
                      this.data[params.index].type == "radio" ||
                      this.data[params.index].type == "select"
                        ? false
                        : true
                  },
                  style: {
                    marginRight: "5px"
                  },
                  on: {
                    click: () => {
                      this.activeindex = params.index;
                      this.modal = true;
                      if (typeof this.data[params.index].content == "string") {
                        this.optionList = JSON.parse(
                          this.data[params.index].content
                        );
                      } else {
                        this.optionList = this.data[params.index].content;
                      }
                      console.log(this.optionList);
                    }
                  }
                },
                "设置"
              ),
              h(
                "Button",
                {
                  props: {
                    type: "error",
                    size: "default"
                  },
                  style: {
                    marginRight: "5px"
                  },
                  on: {
                    click: () => {
                      this.data.splice(params.index, 1);
                    }
                  }
                },
                "删除"
              ),
              h(
                "Button",
                {
                  props: {
                    type: "primary",
                    size: "default"
                  },
                  style: {
                    marginRight: "5px"
                  },
                  on: {
                    click: () => {
                      //this.remove(params.index);
                      if (params.index > 0) {
                        var up = this.data[params.index];
                        this.data.splice(params.index, 1);
                        this.data.splice(params.index - 1, 0, up);
                      }
                    }
                  }
                },
                "上移"
              ),
              h(
                "Button",
                {
                  props: {
                    type: "primary",
                    size: "default"
                  },
                  on: {
                    click: () => {
                      if (params.index < this.data.length) {
                        var down = this.data[params.index];
                        this.data.splice(params.index, 1);
                        this.data.splice(params.index + 1, 0, down);
                      }
                    }
                  }
                },
                "下移"
              )
            ]);
          }
        }
      ];
    }
  },
  computed: {
    power() {
      return false;
    }
  }
};
</script>
<style scoped>
</style>