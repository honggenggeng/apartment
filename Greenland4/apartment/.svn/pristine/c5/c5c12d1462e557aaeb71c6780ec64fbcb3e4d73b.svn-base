<template>
  <div class="operation" id="bb">
    <div v-if="isshow" class="wrap">
      <Row class-name="operation_mode" type="flex" justify="space-between">
        <Col>
        <Button type="ghost" @click="adduser">新建</Button>
        </Col>
        <Col>
        <span>开始时间：</span>
        <DatePicker type="date" v-model="startDate"  placeholder="选择时间"></DatePicker>
        <span>结束时间：</span>
        <DatePicker type="date" v-model="endDate"  placeholder="选择时间"></DatePicker>
        <Select v-model="searchType" style="width:100px">
          <Option v-for="item in searchTypeList" :value="item.key" :key="item.key">{{ item.title }}</Option>
        </Select>
        <Input v-if="searchType != 'isEnable'" v-model="searchValue"   placeholder="请输入搜索的内容" style="width: 200px"></Input>
        <Select v-if="searchType == 'isEnable'" v-model="searchIsEnable"  style="width:200px">
          <Option  :value="0" >启用</Option>
          <Option  :value="1" >禁用</Option>
        </Select>
        <Button icon="ivu-icon ivu-icon-search" @click="search"></Button>
        </Col>
      </Row>
      <Table border ref="selection" @on-row-dblclick="edituser" :columns="columns4" :data="data1"></Table>
      <div class="page">
        <Page :total="total" :page-size="5" @on-change="changePage"></Page>
      </div>

    </div>
    <div v-else class="wrap">
      <Form ref="formValidate" :model="formValidate" :rules="ruleValidate" label-position="right" :label-width="100">
        <Row>
          <Col :xs="24" :lg="12">
          <FormItem label="用户名" prop="userNum">
            <Input :disabled="operationstatus=='add'?false:true" v-model="formValidate.userNum" @on-blur="isExist"></Input>
          </FormItem>
          </Col>
          <Col :xs="24" :lg="12">
          <FormItem label="用户姓名" prop="userName">
            <Input v-model="formValidate.userName"></Input>
          </FormItem>
          </Col>
        </Row>
        <Row>
          <Col :xs="24" :lg="12">
          <FormItem label="邮箱" prop="email">
            <Input v-model="formValidate.email"></Input>
          </FormItem>
          </Col>
          <Col :xs="24" :lg="12">
          <FormItem label="联系方式" prop="telephone">
            <Input v-model="formValidate.telephone"></Input>
          </FormItem>
          </Col>
        </Row>
        <Row>
          <Col :xs="24" :lg="12">
          <FormItem label="密码" prop="passWord">
            <Input v-model="formValidate.passWord" placeholder="不填就是不修改密码" type="password"></Input>
          </FormItem>
          </Col>
          <Col :xs="24" :lg="12">
          <FormItem label="角色" prop="roleUuid">
            <Select v-model="formValidate.roleUuid">
              <Option v-for="(item,index) in roleList" :value="item.uuid" :key="index">{{ item.roleName }}</Option>
            </Select>
          </FormItem>
          </Col>
        </Row>
        <Row>
          <Col :xs="24" :lg="12">
          <FormItem label="站点">
            <Select v-model="formValidate.siteUuids" multiple>
              <Option v-for="(item,index) in siteList" :value="item.uuid" :key="index">{{ item.siteName }}</Option>
            </Select>
          </FormItem>
          </Col>
          <Col :xs="24" :lg="12">
          <FormItem label="管理人员" prop="parentUuid">
            <Select v-model="formValidate.parentUuid">
              <Option v-for="(item,index) in parentList" :value="item.uuid" :key="index">{{ item.userName }}</Option>
            </Select>
          </FormItem>
          </Col>
        </Row>

        <Row>
          <Col :xs="24" :lg="12">
          <FormItem label="状态" prop="isEnable">
            <RadioGroup v-model="formValidate.isEnable">
              <Radio :label="0">启用</Radio>
              <Radio :label="1">禁用</Radio>
            </RadioGroup>
          </FormItem>
          </Col>
        </Row>
        <Col :xs="24" :lg="12">
        <FormItem>
          <Button type="primary" @click="handleSubmit('formValidate')" class="save " style="margin-left: 0px;">保存</Button>
          <Button type="ghost" @click="handleReset('formValidate')" style="margin-left: 8px">取消</Button>
        </FormItem>
        </Col>
      </Form>

    </div>
  </div>
</template>

<script>
import {
  useradd,
  userid,
  userlist,
  userupdate,
  userpassword,
  userIsExist,
  rolelist,
  siteSpinner,
  userSpinner
} from "../../api/index";
export default {
  data() {
    return {
      searchIsEnable:0,
      startDate: "",
      endDate: "",
      isshow: true,
      total: 0,
      parentList: [],
      operationstatus: "add",
      searchValue: "",
      searchType: "userNum",
      searchTypeList: [
        {
          title: "用户名",
          key: "userNum"
        },
        {
          title: "用户名称",
          key: "userName"
        },
        {
          title: "角色",
          key: "roleName"
        },
        {
          title: "站点",
          key: "siteNames"
        },
        {
          title: "状态",
          key: "isEnable"
        }
      ],
      siteList: [],
      roleList: [],
      value4: "",
      formValidate: {
        userNum: "",
        userName: "",
        roleUuid: "",
        siteUuids: [],
        isEnable: 0,
        parentUuid: "",
        email: "",
        telephone: ""
      },
      ruleValidate: {
        userNum: [
          {
            required: true,
            message: "用户ID为必填项",
            trigger: "change"
          }
        ],
        userName: [
          {
            required: true,
            message: "用户名为必填项",
            trigger: "change"
          }
        ],
        roleUuid: [
          {
            required: true,
            message: "角色为必填项",
            trigger: "change"
          }
        ],
        // siteUuid: [
        //   {
        //     required: true,
        //     message: "站点为必填项",
        //     trigger: "change"
        //   }
        // ],
        email: [
          {
            required: false,
            message: "角色为必填项",
            trigger: "change"
          }
        ],
        telephone: [
          {
            required: false,
            message: "站点为必填项",
            trigger: "change"
          }
        ],
        passWord: [
          {
            required: false,
            message: "站点为必填项",
            trigger: "change"
          }
        ]
      },
      columns4: [
        {
          type: "selection",
          width: 60,
          align: "center"
        },
        {
          title: "用户名",
          key: "userNum"
        },
        {
          title: "用户名称",
          key: "userName"
        },
        {
          title: "角色",
          key: "roleName"
        },
        {
          title: "站点",
          key: "siteNames"
        },
        {
          title: "登录时间",
          key: "lastLoginDate"
        },
        {
          title: "状态",
          key: "isEnable"
        }
      ],
      data1: []
    };
  },
  created() {
    this.getformatdata({pageSize: 10, startPage: 1})
    rolelist({ pageNum: 1 }).then(res => {
      this.roleList = res.data.data;
    });
    siteSpinner().then(res => {
      this.siteList = res.data.data;
      //this.getformatdata({pageSize: 10, startPage: 1})
    });
    userSpinner().then(res => {
      this.parentList = res.data.data;
    });
  },
  methods: {
    search() {
      let searchData = {
        pageSize: 10,
        startPage: 1,
        startDate: this.startDate,
        endDate: this.endDate
      };
      if (this.searchType == "isEnable") {
        searchData.isEnable = this.searchIsEnable;
      } else {
        searchData[this.searchType] = this.searchValue;
      }
      if (this.endDate != "" && this.startDate != "") {
        if (this.endDate >= this.startDate) {
          this.getformatdata(searchData);
        } else {
          this.$Message.info("结束时间应大于开始时间");
          this.endDate = "";
        }
      } else {
        this.getformatdata(searchData);
      }
    },
    changePage(startPage) {
      this.getformatdata({pageSize: 10, startPage: startPage})
    },
    isExist() {
      userIsExist({ userNum: this.formValidate.userNum }).then(res => {
        if (!res.data.data) {
          this.$Message.info("用户名重复");
          this.formValidate.userNum = "";
        }
      });
    },
    adduser() {
      this.isshow = false;
      this.operationstatus = "add";
    },
    edituser(row, index) {
      userid(row.uuid).then(res => {
        let sites = res.data.data.siteRecords.map(item => {
          return item.uuid;
        });
        console.log(sites);
        this.formValidate = {
          isEnable: res.data.data.isEnable,
          userNum: res.data.data.userNum,
          userName: res.data.data.userName,
          email: res.data.data.email,
          telephone: res.data.data.telephone,
          roleUuid: res.data.data.role.uuid,
          siteUuids: sites,
          parentUuid: res.data.data.parentUuid,
          uuid: res.data.data.uuid
        };
      });

      this.isshow = false;
      this.operationstatus = "edit";
      console.log(this.formValidate.roleUuid);
    },
    handleSelectAll(status) {
      this.$refs.selection.selectAll(status);
    },
    handleSubmit(name) {
      this.$refs[name].validate(valid => {
        if (valid) {
          this.$Message.success("Success!");
          //this.formValidate.siteUuids = JSON.stringify(this.formValidate.siteUuids)
          this.formValidate.siteUuids = JSON.stringify(
            this.formValidate.siteUuids
          )
            .replace("[", "")
            .replace("]", "")
            .replace(/"/g, "");
          console.log(this.formValidate.siteUuids);
          if (this.operationstatus == "add") {
            useradd(this.formValidate).then(res => {
              this.getformatdata({pageSize: 10, startPage: 1})
            });
          } else if (this.operationstatus == "edit") {
            userupdate(this.formValidate).then(res => {
              this.getformatdata({pageSize: 10, startPage: 1})
            });
          }
          this.formValidate = {
        userNum: "",
        userName: "",
        roleUuid: "",
        siteUuids: [],
        isEnable: 0,
        parentUuid: "",
        email: "",
        telephone: ""
          };
          this.isshow = true;
          //this.isshow = true
          console.log(this.formValidate);
        } else {
          this.$Message.error("Fail!");
        }
      });
    },
    handleReset(name) {
      this.formValidate = {
        userNum: "",
        userName: "",
        roleUuid: "",
        siteUuids: [],
        isEnable: 0,
        parentUuid: "",
        email: "",
        telephone: ""
          };
      this.isshow = true;
    },
    getformatdata(data) {
      userlist(data).then(res => {
        this.data1 = res.data.data.records;
        this.total = res.data.data.total;
        console.log(res.data);
        this.data1.forEach((item, index) => {
          item.lastLoginDate = this.$util.formatTime(item.lastLoginDate);
          console.log(item.lastLoginDate);
          item.isEnable = item.isEnable == 0 ? "启用" : "禁用";
        });
      });
    },
    handleSuccess() {}
  }
};
</script>
<style scoped>
.operation_mode {
  padding: 0px 0px 10px;
}
.page {
  float: right;
  margin: 10px;
}
</style>