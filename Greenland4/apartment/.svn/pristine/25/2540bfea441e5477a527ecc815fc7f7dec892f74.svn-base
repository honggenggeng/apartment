<template>
  <div class="operation">
    <div v-if="showcom" class="wrap">
      <Row style="margin-bottom:10px;" type="flex" justify="space-between">
        <Col>
        <Button type="ghost" @click='addShift' style="margin-right:20px;">新建</Button>
        <Button type="ghost" @click='removeShift'>
          删除
        </Button>
        </Col>
        <Col>
        <span>开始时间：</span>
        <DatePicker type="date"  v-model="startDate" placeholder="选择时间"></DatePicker>
        <span>结束时间：</span>
        <DatePicker type="date"  v-model="endDate" placeholder="选择时间"></DatePicker>
        <Select v-model="searchType" style="width:100px">
          <Option v-for="item in searchTypeList" :value="item.key" :key="item.key">{{ item.title }}</Option>
        </Select>
        <Input v-if="searchType != 'isEnable'" v-model="searchValue"   placeholder="请输入搜索的内容" style="width: 200px"></Input>
        <Select v-if="searchType == 'isEnable'" v-model="searchIsEnable"  style="width:200px">
          <Option  :value="0" >启用</Option>
          <Option  :value="1" >禁用</Option>
        </Select>
        <Button icon="ivu-icon ivu-icon-search" @click="search"></Button>
        </Col>

      </Row>

      <Table border @on-select="onSelect" @on-row-dblclick="editShift" :data="tableData1" :columns="columns4"></Table>
      <div style="float:right;margin:10px;">
        <Page :total="total" :page-size='10'   @on-change="onChange"></Page>
      </div>

    </div>

    <Form v-else class="wrap" ref="formValidate" :model="formValidate" :rules="ruleValidate" label-position="right" :label-width="100">
      <Row>
        <Col :xs="24" :lg="12">
        <FormItem label="站点名称" prop="siteUuid">
          <Select v-model="formValidate.siteUuid" @on-change="onChangeSite">
            <Option v-for="(item,index) in siteList" :key="index" :value="item.uuid">{{item.siteName}}</Option>
          </Select>
        </FormItem>
        </Col>
        <!-- <Col :xs="24" :lg="12">
        <FormItem label="交接班编号" prop="shiftNum">
          <Input disabled v-model="formValidate.shiftNum"></Input>
        </FormItem>
        </Col> -->
      </Row>
      <Row>
        <Col :xs="24" :lg="12">
        <FormItem label="名称" prop="shiftName">
          <Input v-model="formValidate.shiftName"></Input>
        </FormItem>
        </Col>
        <Col :xs="24" :lg="12">
        <FormItem label="状态" prop="isEnable">
          <RadioGroup v-model="formValidate.isEnable">
            <Radio :label="0">启用</Radio>
            <Radio :label="1">禁用</Radio>
          </RadioGroup>
        </FormItem>
        </Col>

      </Row>
      <Row style="margin-bottom:20px;">
          <Col span="2">
          <Button type="ghost" @click="add">添加新项</Button>
          </Col>
          <Col span="2">
          <Upload name="file" :on-success="handleSuccess" :action='$util.ajaxUrl+"/digiops/shift/inputExcel"'>
            <Button type="ghost">导入列表</Button>
          </Upload>
          </Col>
        </Row>
      
      <Table :columns="columns" :data="data" :border="true"></Table>
      <Modal v-model="modal" title="编辑选项" @on-ok="ok" @on-cancel="cancel">
        <Button type="primary" @click="addoption">添加</Button>
        <Row v-for="(item,index) in optionList" :key="index" style="margin:5px 0">
          <Col span="20" class-name="optionStyleBtn">
          <Input v-model="item.value" :key='index'></Input>
          </Col>
          <Col span="2" style="margin-left:10px;">
          <Button @click="delOption(index)">删除</Button>
          </Col>
        </Row>
      </Modal>
      <Col :xs="24" :lg="12" style="margin-top:20px;">
      <FormItem>
        <Button type="primary" @click="handleSubmit('formValidate')" class="save " style="margin-left: 0px;">保存</Button>
        <Button type="ghost" @click="handleReset('formValidate')" class="button " style="margin-left: 8px">取消</Button>
      </FormItem>
      </Col>
    </Form>
  </div>
</template>
<script>
import {
  shiftAdd,
  shiftCode,
  shiftList,
  shiftUpdate,
  shiftId,
  siteSpinner
} from "../../api/index.js";
export default {
  data() {
    return {
      searchIsEnable:0,
      startDate: "",
      endDate: "",
      typeList: [
        { title: "是否正常", type: "button" },
        { title: "单选框", type: "radio" },
        { title: "下拉框", type: "select" },
        { title: "输入框", type: "text" },
      ],
      columns: [],
      operationstatus: "add",
      data: [],
      searchValue: "",
      searchType: "shiftNum",
      searchTypeList: [
        {
          title: "交接班编号",
          key: "shiftNum"
        },
        {
          title: "交接班名称",
          key: "shiftName"
        },

        {
          title: "站点名称",
          key: "siteName"
        },
        {
          title: "状态",
          key: "isEnable"
        }
      ],
      modal: false,
      total:0,
      tableData1: [],
      showcom: true,
      selection: [],
      siteList: [],
      optionList: [],
      formValidate: {
        shiftNum: "",
        shiftName: "",
        siteUuid: "",
        isEnable: 0
      },
      ruleValidate: {
        shiftNum: [
          {
            required: false,
            trigger: "change"
          }
        ],
        shiftName: [
          {
            required: true,
            message: "名称为必填项",
            trigger: "change"
          }
        ],
        siteUuid: [
          {
            required: true,
            message: "站点为必填项",
            trigger: "change"
          }
        ]
      },
      columns4: [
        {
          type: "selection",
          width: 60,
          align: "center"
        },
        {
          title: "交接班编号",
          key: "shiftNum"
        },
        {
          title: "交接班名称",
          key: "shiftName"
        },
        {
          title: "站点名称",
          key: "siteName"
        },
        {
          title: "创建时间",
          key: "createTime",
          sortable: true
        },
        {
          title: "状态",
          key: "isEnable"
        }
      ]
    };
  },
  created() {
    this.init();
    this.getformatdata({ pageSize: 10, startPage: 1 });
    siteSpinner().then(res => {
      this.siteList = res.data.data;
    });
  },
  methods: {
    search() {
      let searchData = {
        pageSize: 10,
        startPage: 1,
        startDate: this.startDate,
        endDate: this.endDate
      };
      if (this.searchType == "isEnable") {
        searchData.isEnable = this.searchIsEnable;
      } else {
        searchData[this.searchType] = this.searchValue;
      }
      if (this.endDate != "" && this.startDate != "") {
        if (this.endDate >= this.startDate) {
          this.getformatdata(searchData);
        } else {
          this.$Message.info("结束时间应大于开始时间");
          this.endDate = "";
        }
      } else {
        this.getformatdata(searchData);
      }
    },
    handleSuccess(res,file){
      this.data = res.data
    },
    onChangeSite(value) {
      if (this.operationstatus == "add") {
        shiftCode(value).then(res => {
          this.formValidate.shiftNum = res.data.data;
        });
      }
    },
    handleSelectAll(status) {
      this.$refs.selection.selectAll(status);
    },
    handleSubmit(name) {
      this.$refs[name].validate(valid => {
        if (valid) {
          this.$Message.success("Success!");
          this.data.forEach((item, index) => {
            item.seq = index;
            //item.content = JSON.stringify(item.content)
          });
          this.formValidate.shiftTemplate = JSON.stringify(this.data);
          console.log(this.formValidate);
          if (this.operationstatus == "add") {
            shiftAdd(this.formValidate).then(res => {
    this.getformatdata({ pageSize: 10, startPage: 1 });
            });
          } else {
            shiftUpdate(this.formValidate).then(res => {
    this.getformatdata({ pageSize: 10, startPage: 1 });
            });
          }
          this.formValidate = {
            shiftNum: "",
            shiftName: "",
            siteUuid: "",
            isEnable: 0
          };
          this.data =[]
          this.showcom = true;
        } else {
          this.$Message.error("Fail!");
        }
      });
    },
    handleReset(name) {
      this.showcom = true;
      this.$refs[name].resetFields();
      this.data =[]
    },
    add() {
      this.data.push({
        title: "",
        type: 'button',
        content: []
      });
    },
    addoption() {
      this.optionList.push({
        value: ""
      });
    },
    ok() {
      this.data[this.activeindex].content = this.optionList;
      this.optionList = [];
    },
    cancel() {},
    addShift: function() {
      this.showcom = false;
      this.operationstatus = "add";
    },
    editShift(row, index) {
      shiftId(row.uuid).then(res => {
        let shiftDetail = res.data.data;
        this.formValidate = {
          shiftNum: shiftDetail.shiftNum,
          shiftName: shiftDetail.shiftName,
          siteUuid: shiftDetail.siteUuid,
          isEnable: shiftDetail.isEnable,
          uuid: shiftDetail.uuid
        };
        this.data = shiftDetail.templates
      });
      this.showcom = false;
      this.operationstatus = "edit";
    },
    removeShift() {},
    copyShift() {
      //this.selection
    },
    onSelect(selection, row) {
      this.selection = selection;
    },
    onChange(startPage) {
    this.getformatdata({ pageSize: 10, startPage: startPage });
    },
    delOption(index) {
      this.optionList.splice(index, 1);
    },
    getformatdata(data){
      shiftList(data).then(res => {
      this.tableData1 = res.data.data.records;
      this.total = res.data.data.total;
      this.tableData1.forEach(item => {
        item.createTime = this.$util.formatTime(item.createTime);
        item.isEnable = item.isEnable == 0 ? "启用" : "禁用";
      });
    });
    },
    init() {
      let vm = this;
      this.columns = [
        {
          title: "序号",
          width: 80,
          align: "center",
          type: "index"
        },
        {
          title: "交接班名称",
          key: "title",
          render: (h, params) => {
            return h("Input", {
              props: {
                type: "text",
                value: this.data[params.index].title //此处如何让数据双向绑定
              },
              on: {
                "on-blur": event => {
                  this.data[params.index].title = event.target.value;
                }
              }
            });
          }
        },
        {
          title: "交接班类型",
          key: "type",
          render: (h, params) => {
            return h(
              "Select",
              {
                props: {
                  value: this.data[params.index].type
                },
                on: {
                  "on-change": event => {
                    this.data[params.index].type = event;
                  }
                }
              },
              this.typeList.map((item)=> {
                return h(
                  "Option",
                  {
                    props: {
                      value: item.type
                    }
                  },
                  item.title
                );
              })
            );
          }
        },
        {
          title: "操作",
          key: "content",
          align: "center",
          render: (h, params) => {
            return h("div", [
              h(
                "Button",
                {
                  props: {
                    type: "primary",
                    size: "default",
                    disabled:
                      this.data[params.index].type == "select"
                        ? false
                        : true
                  },
                  style: {
                    marginRight: "5px"
                  },
                  on: {
                    click: () => {
                      this.activeindex = params.index;
                      this.modal = true;
                      if (typeof this.data[params.index].content == "string") {
                        this.optionList = JSON.parse(
                          this.data[params.index].content
                        );
                      } else {
                        this.optionList = this.data[params.index].content;
                      }
                    }
                  }
                },
                "设置"
              ),
              h(
                "Button",
                {
                  props: {
                    type: "error",
                    size: "default"
                  },
                  style: {
                    marginRight: "5px"
                  },
                  on: {
                    click: () => {
                      this.data.splice(params.index, 1);
                    }
                  }
                },
                "删除"
              ),
              h(
                "Button",
                {
                  props: {
                    type: "primary",
                    size: "default"
                  },
                  style: {
                    marginRight: "5px"
                  },
                  on: {
                    click: () => {
                      //this.remove(params.index);
                      if (params.index > 0) {
                        var up = this.data[params.index];
                        this.data.splice(params.index, 1);
                        this.data.splice(params.index - 1, 0, up);
                      }
                    }
                  }
                },
                "上移"
              ),
              h(
                "Button",
                {
                  props: {
                    type: "primary",
                    size: "default"
                  },
                  on: {
                    click: () => {
                      if (params.index < this.data.length) {
                        var down = this.data[params.index];
                        this.data.splice(params.index, 1);
                        this.data.splice(params.index + 1, 0, down);
                      }
                    }
                  }
                },
                "下移"
              )
            ]);
          }
        }
      ];
    }
  },
  computed: {}
};
</script>
<style scoped>
</style>
